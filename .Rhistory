print(textes.afc$col)
#graphique
plot(textes.afc,cex=0.75)
#graphique
plot(textes.afc,cex=0.75,xlim=c(-1,+1))
#graphique
plot(textes.afc,cex=0.75,xlim=c(-1,+1),ylim=c(-1,+1))
#graphique
plot(textes.afc,cex=0.75,xlim=c(-0.1,+0.1),ylim=c(-0.1,+0.1))
#graphique
plot(textes.afc,cex=0.75,xlim=c(-0.1,+0.05),ylim=c(-0.1,+0.1))
#graphique
plot(textes.afc,cex=0.75,xlim=c(-0,+0.05),ylim=c(-0.1,+0.1))
#graphique
plot(textes.afc,cex=0.75,xlim=c(-0,+0.05),ylim=c(-0.02,+0.05))
#graphique
plot(textes.afc,cex=0.75)
#graphique
plot(textes.afc,cex=0.75,ylim=c(-40,+40))
#positionner les modalités de la variable illustrative + calcul des valeurs test
K <- nlevels(textes.illus[,1])
var.illus <- unclass(textes.illus[,1])
m1 <- c()
m2 <- c()
for (i in 1:K){m1[i] <- mean(textes.afc$row$coord[var.illus==i,1])}
for (i in 1:K){m2[i] <- mean(textes.afc$row$coord[var.illus==i,2])}
cond.moyenne <- cbind(m1,m2)
rownames(cond.moyenne) <- levels(textes.illus[,1])
print(cond.moyenne)
#graphique
plot(c(textes.afc$row$coord[,1],m1),c(textes.afc$row$coord[,2],m2),xlab="Comp.1",ylab="Comp.2",main="Positionnement var.illus cat?gorielle",type="n",ylim = c(-0.1,0.1),xlim=c(-0.1,0.1))
abline(h=0,v=0)
text(textes.afc$row$coord[,1],textes.afc$row$coord[,2],rownames(textes.actifs),cex=0.5)
text(m1,m2,rownames(cond.moyenne),cex=0.95,col="red")
#graphique
plot(c(textes.afc$row$coord[,1],m1),c(textes.afc$row$coord[,2],m2),xlab="Comp.1",ylab="Comp.2",main="Positionnement var.illus catégorielle",type="n")
abline(h=0,v=0)
text(textes.afc$row$coord[,1],textes.afc$row$coord[,2],rownames(textes.actifs),cex=0.5)
text(m1,m2,rownames(cond.moyenne),cex=0.95,col="red")
#graphique
plot(c(textes.afc$row$coord[,1],m1),c(textes.afc$row$coord[,2],m2),xlab="Comp.1",ylab="Comp.2",main="Positionnement var.illus catégorielle",type="n",ylim = c(-1,1),xlim=c(-1,1))
abline(h=0,v=0)
text(textes.afc$row$coord[,1],textes.afc$row$coord[,2],rownames(textes.actifs),cex=0.5)
text(m1,m2,rownames(cond.moyenne),cex=0.95,col="red")
#graphique
plot(c(textes.afc$row$coord[,1],m1),c(textes.afc$row$coord[,2],m2),xlab="Comp.1",ylab="Comp.2",main="Positionnement var.illus catégorielle",type="n",ylim = c(-0.5,0.5),xlim=c(-0.5,0.5))
abline(h=0,v=0)
text(textes.afc$row$coord[,1],textes.afc$row$coord[,2],rownames(textes.actifs),cex=0.5)
text(m1,m2,rownames(cond.moyenne),cex=0.95,col="red")
textes.afc$row$coord[,1]
#Centrage et r?duction des donn?es
data<-scale(textes.actifs, center = TRUE, scale = TRUE)
#Calcul du tableau des distances
dc<-dist(data, method ="euclidean", diag=FALSE, upper=FALSE)
hc <- hclust(dc,method='ward.D')
hc
plot(hc)
#Pour visualiser le dendrogramme
plot(hc,hang=-1)
#Pour avoir la partition en 11 classes :
class=cutree(hc,11)
pairs(textes.actifs[1:10],col=class[1:10])
unclass(hc)
hc$height
# tracer un rectangle sur les classes
plot(hc,hang=-1)
rect.hclust(hc, k=11, border="red")
# Visualiser les classes sur le premier plan factoriel
library(cluster)
clusplot(dc,class,diss=T,shade=T,color=T,labels=9,main="")
#Avec ACP
plot(textes.acp,choix="ind", habillage="ind",col.hab=class,xlim=c(-1,1),ylim=c(-1,1))
# Faire une CAH selon diff?rents critères d'agrégation
dc=dist(textes.actifs)
par(mfrow=c(2,3))
possible <- c("ward.D", "single", "complete", "average", "mcquitty","median",
"centroid")
for(k in 1:5) plot(hclust(dc,possible[k]),hang=-1,main=possible[k])
par(mfrow=c(2,3))
possible <- c("ward.D", "single", "complete", "average", "mcquitty","median",
"centroid")
for(k in 2:6) plot(hclust(dc,possible[k]),hang=-1,main=possible[k])
plot(hclust(dc^2,"ward.D"),hang=-1,main="inertie interclasse")
class
cbind(class,textes.illus$sentimentDominant)
cbind(sort(class,textes).illus$sentimentDominant)
cbind(sort(class),textes.illus$sentimentDominant)
class
cbind(sort(class),textes.illus$sentimentDominant)
#Pour visualiser le dendrogramme
plot(hc,hang=-1,col=textes.illus$sentimentDominant)
plot(hc$height[67 :1],type="b")
# choix du nombre de classes (utliser les indices de la hi?rarchie hc$height ? utilier avec ward sur le carr? de la distance dc^2)
par(mfrow=c(1,2))
plot(hc$height[67 :1],type="b")
plot(hc$height[67 :50],type="b")
hc$height
m=ncol(textes.actifs)
n=20
R2=0
x=textes.actifs
Iinter = 0
g = apply(x, 2, mean)
I = sum(diag(var(x))) # Inertie totale
dendro=hclust(dc,"ward.D")
for(i in 2:n){
class = cutree(dendro,k=i)
ncl = unique(class)
d = numeric(length(ncl))
nb = integer(length(ncl))
for(j in ncl){
nb[j] = sum(class==j)
if(nb[j]>1){
m = apply(x[class==j,], 2, mean)
} else {
m = x[class==j,]
}
d[j] = sum((m-g)^2)
}
Iinter = (1/n)*sum(nb*d)
R2[i] = Iinter/I
}
R2
ncl = 2:(n-1)
PseudoF = (R2[ncl]/(ncl-1))/((1-R2[ncl])/(n-ncl))
plot(1:(n-1),R2[1:(n-1)], type = 'b', xlab = "Nombre de classes", ylab = "Rsquare")
title("Indice du R2")
plot(ncl[1:n-1],PseudoF[1:n-1], type = 'b', xlab = "Nombre de classes", ylab = "PseudoF")
title("Indice du PseudoF")
#KMeans
km=kmeans(textes.actifs,10)
#KMeans
km=kmeans(textes.actifs,11)
print(km$cluster)
cbind(km$cluster,textes.illus$sentimentDominant)
clus_sent = cbind(km$cluster,textes.illus$sentimentDominant)
clus_sent = data.frame(cbind(km$cluster,textes.illus$sentimentDominant))
clus_sent
colnames(clus_sent) = c('cluster','sentiment')
clus_sent
wss <- (nrow(data)-1)*sum(apply(data,2,var))
for (i in 2:15) wss[i] <- sum(kmeans(data, centers=i)$withinss)
plot(1:15, wss, type="b", xlab="Nombre de classes",ylab="Somme des carrés intra classe")
# Evolution de linertie interclasse
bss=0
for (i in 2:15) bss[i] <- sum(kmeans(data, centers=i)$betweenss)
plot(1:15, bss, type="b", xlab="Nombre de classes",ylab="Somme des carrés inter classe")
data=textes.actifs
wss <- (nrow(data)-1)*sum(apply(data,2,var))
for (i in 2:15) wss[i] <- sum(kmeans(data, centers=i)$withinss)
plot(1:15, wss, type="b", xlab="Nombre de classes",ylab="Somme des carrés intra classe")
# Evolution de linertie interclasse
bss=0
for (i in 2:15) bss[i] <- sum(kmeans(data, centers=i)$betweenss)
plot(1:15, bss, type="b", xlab="Nombre de classes",ylab="Somme des carrés inter classe")
#Projection des classes sur les premières composantes principales
plot(textes.acp$ind$coord,col=km$cluster, pch=16, cex=2)
text(textes.acp$ind$coord[,1],textes.acp$ind$coord[,2],row.names(textes.acp$ind$coord))
abline(v = 0, h = 0)
#Projection des classes sur les premières composantes principales
plot(textes.acp$ind$coord,col=km$cluster, pch=16, cex=2,xlim=c(-1,1),ylim=c(-1,1))
layout(1)
#Projection des classes sur les premières composantes principales
plot(textes.acp$ind$coord,col=km$cluster, pch=16, cex=2,xlim=c(-1,1),ylim=c(-1,1))
text(textes.acp$ind$coord[,1],textes.acp$ind$coord[,2],row.names(textes.acp$ind$coord))
abline(v = 0, h = 0)
#Projection des classes sur les premières composantes principales
plot(textes.acp$ind$coord,col=km$cluster, pch=16, cex=2,xlim=c(-1,1),ylim=c(-1,1))
#Projection des classes sur les premières composantes principales
plot(textes.acp$ind$coord,col=km$cluster, pch=16, cex=1,xlim=c(-1,1),ylim=c(-1,1))
text(textes.acp$ind$coord[,1],textes.acp$ind$coord[,2],row.names(textes.acp$ind$coord),cex=0.5)
abline(v = 0, h = 0)
#Projection des classes sur les premières composantes principales (AFC)
plot(textes.afc$row$coord,col=km$cluster, pch=16, cex=2,xlim=c(-1,1),ylim=c(-1,1))
text(textes.afc$row$coord[,1],textes.afc$row$coord[,2],row.names(textes.afc$row$coord))
abline(v = 0, h = 0)
layout(1)
#Projection des classes sur les premières composantes principales
plot(textes.acp$ind$coord,col=km$cluster, pch=16, cex=1,xlim=c(-1,1),ylim=c(-1,1))
text(textes.acp$ind$coord[,1],textes.acp$ind$coord[,2],row.names(textes.acp$ind$coord),cex=0.5)
text(m1,m2,rownames(cond.moyenne),cex=0.95,col="red")
abline(v = 0, h = 0)
#Projection des classes sur les premières composantes principales
plot(textes.acp$ind$coord,col=km$cluster, pch=16, cex=1,xlim=c(-0.01,0.01),ylim=c(-0.01,0.01))
text(textes.acp$ind$coord[,1],textes.acp$ind$coord[,2],row.names(textes.acp$ind$coord),cex=0.5)
layout(1)
#Projection des classes sur les premières composantes principales
plot(textes.acp$ind$coord,col=km$cluster, pch=16, cex=1,xlim=c(-0.01,0.01),ylim=c(-0.1,0.1))
#Projection des classes sur les premières composantes principales
plot(textes.acp$ind$coord,col=km$cluster, pch=16, cex=1,xlim=c(-0.1,0.1),ylim=c(-0.1,0.1))
#Projection des classes sur les premières composantes principales
plot(textes.acp$ind$coord,col=km$cluster, pch=16, cex=1,xlim=c(-1,1),ylim=c(-0.1,0.1))
#Projection des classes sur les premières composantes principales
plot(textes.acp$ind$coord,col=km$cluster, pch=16, cex=1,xlim=c(-1,1),ylim=c(-1,1))
#Projection des classes sur les premières composantes principales
plot(textes.acp$ind$coord,col=km$cluster, pch=16, cex=1,xlim=c(-0.5,0.5),ylim=c(-0.5,0.5))
text(textes.acp$ind$coord[,1],textes.acp$ind$coord[,2],row.names(textes.acp$ind$coord),cex=0.3)
text(m1,m2,rownames(cond.moyenne),cex=0.95,col="red")
#positionner les modalités de la variable illustrative + calcul des valeurs test
K <- nlevels(textes.illus[,1])
var.illus <- unclass(textes.illus[,1])
m1 <- c()
m2 <- c()
for (i in 1:K){m1[i] <- mean(textes.acp$ind$coord[var.illus==i,1])}
for (i in 1:K){m2[i] <- mean(textes.acp$ind$coord[var.illus==i,2])}
cond.moyenne <- cbind(m1,m2)
rownames(cond.moyenne) <- levels(textes.illus[,1])
print(cond.moyenne)
layout(1)
#Projection des classes sur les premières composantes principales
plot(textes.acp$ind$coord,col=km$cluster, pch=16, cex=1,xlim=c(-0.5,0.5),ylim=c(-0.5,0.5))
text(textes.acp$ind$coord[,1],textes.acp$ind$coord[,2],row.names(textes.acp$ind$coord),cex=0.3)
text(m1,m2,rownames(cond.moyenne),cex=0.95,col="red")
abline(v = 0, h = 0)
layout(1)
#Projection des classes sur les premières composantes principales
plot(textes.acp$ind$coord,col=km$cluster, pch=16, cex=1,xlim=c(-0.5,0.5),ylim=c(-0.5,0.5))
text(m1,m2,rownames(cond.moyenne),cex=0.95,col="red")
abline(v = 0, h = 0)
install.packages("textTinyR")
utl = Doc2Vec$new()
library(textTinyR)
tokens
utl = Doc2Vec$new(tokens)
tokens$word
tokens = df %>% unnest_tokens(word,text)
# Analyse des sentiments
library(tidyverse)
library(tidytext)
library(glue)
library(stringr)
library(textdata)
df
tokens = df %>% unnest_tokens(word,text)
tokens$word
utl = Doc2Vec$new(tokens$word)
typeof(tokens$word)
typeof(as.list(tokens$word))
as.list(tokens$word)
utl = Doc2Vec$new(as.list(tokens$word))
utl = Doc2Vec$new(as.list(tokens$word),"doc2vec")
utl = Doc2Vec$new(as.list(tokens$word),"doc2vec.txt")
utl = Doc2Vec$new(as.list(tokens$word),"doc2vec.txt")
PATH = system.file("doc2vec.txt", "word_vecs.txt", package = "textTinyR")
utl = Doc2Vec$new(as.list(tokens$word),PATH)
PATH = system.file("doc2vec.txt", "doc2vec.txt", package = "textTinyR")
utl = Doc2Vec$new(as.list(tokens$word),PATH)
PATH = system.file("test", "doc2vec.txt", package = "textTinyR")
utl = Doc2Vec$new(as.list(tokens$word),PATH)
utl = Doc2Vec$new(as.list(tokens$word))
utl = Doc2Vec$new(as.list(tokens$word),PATH="doc2vec.txt")
utl = Doc2Vec$new(as.list(tokens$word),PATH="doc2vec.txt")
utl = Doc2Vec$new(as.list(tokens$word),word_vector_FILE="doc2vec.txt")
utl = Doc2Vec$new(as.list(tokens$word),word_vector_FILE="doc2vec.txt",verbose=TRUE)
as.list(df$text)
texts = df$text
for(i in 1:nrow(texts)){
texts[i] = strsplit(texts[i]," ")[[1]]
}
for(i in 1:length(texts)){
texts[i] = strsplit(texts[i]," ")[[1]]
}
texts
strsplit(texts[1]," ")[[1]]
strsplit(texts[1]," ")
strsplit(texts[2]," ")
strsplit(texts[3]," ")
strsplit(texts[10]," ")
df$text
texts[10]
texts = df$text
texts[10]
strsplit(texts[10]," ")
typeof(strsplit(texts[10]," "))
for(i in 1:length(texts)){
texts[i] = strsplit(texts[i]," ")
}
texts = df$text
for(i in 1:length(texts)){
texts[i] = strsplit(texts[i]," ")
}
texts = df$text
for(i in 1:length(texts)){
strsplit(texts[i]," ")
}
for(i in 1:length(texts)){
texts[i] = strsplit(texts[i]," ")
}
texts = df$text
tokenized_texts = c()
for(i in 1:length(texts)){
tokenized_texts[i] = strsplit(texts[i]," ")
}
tokenized_texts
typeof(tokenized_texts)
PATH = system.file("test", "doc2vec.txt", package = "textTinyR")
utl = Doc2Vec$new(tokenized_texts,word_vector_FILE="doc2vec.txt",verbose=TRUE)
typeof(c())
typeof(c('a'))
typeof(c('a',1))
typeof(c(1,2))
PATH = system.file("test", "doc2vec.txt", package = "textTinyR")
utl = Doc2Vec$new(list(tokenized_texts),word_vector_FILE="doc2vec.txt",verbose=TRUE)
texts = df$text
tokenized_texts = c()
for(i in 1:length(texts)){
tokenized_texts[i] = c(strsplit(texts[i]," "))
}
tokenized_texts
texts = df$text
tokenized_texts = c()
for(i in 1:length(texts)){
tokenized_texts[i] = strsplit(texts[i]," ")
}
tokenized_texts
tokenized_texts = c(tokenized_texts)
tokenized_texts
PATH = system.file("test", "doc2vec.txt", package = "textTinyR")
utl = Doc2Vec$new(list(tokenized_texts),word_vector_FILE="doc2vec.txt",verbose=TRUE)
tokens$word
df$text
c(df$text)
df$text
clust_vec = textTinyR::tokenize_transform_vec_docs(object = df$text, as_token = T,
to_lower = T,
remove_punctuation_vector = F,
remove_numbers = F,
trim_token = T,
split_string = T,
split_separator = " \r\n\t.,;:()?!//",
remove_stopwords = T,
language = "english",
min_num_char = 3,
max_num_char = 100,
stemmer = "porter2_stemmer",
threads = 4,
verbose = T)
clust_vec
unq = unique(unlist(clust_vec$token, recursive = F))
length(unq)
unq
utl = textTinyR::sparse_term_matrix$new(vector_data = concat, file_data = NULL,
document_term_matrix = TRUE)
utl = textTinyR::sparse_term_matrix$new(vector_data = df$text, file_data = NULL,
document_term_matrix = TRUE)
utl
tm = utl$Term_Matrix(sort_terms = FALSE, to_lower = T, remove_punctuation_vector = F,
remove_numbers = F, trim_token = T, split_string = T,
stemmer = "porter2_stemmer",
split_separator = " \r\n\t.,;:()?!//", remove_stopwords = T,
language = "english", min_num_char = 3, max_num_char = 100,
print_every_rows = 100000, normalize = NULL, tf_idf = F,
threads = 6, verbose = T)
gl_term_w = utl$global_term_weights()
str(gl_term_w)
save_dat = textTinyR::tokenize_transform_vec_docs(object = concat, as_token = T,
to_lower = T,
remove_punctuation_vector = F,
remove_numbers = F, trim_token = T,
split_string = T,
split_separator = " \r\n\t.,;:()?!//",
remove_stopwords = T, language = "english",
min_num_char = 3, max_num_char = 100,
stemmer = "porter2_stemmer",
path_2folder = "./",
threads = 1,                     # whenever I save data to file set the number threads to 1
verbose = T)
save_dat = textTinyR::tokenize_transform_vec_docs(object = df$text, as_token = T,
to_lower = T,
remove_punctuation_vector = F,
remove_numbers = F, trim_token = T,
split_string = T,
split_separator = " \r\n\t.,;:()?!//",
remove_stopwords = T, language = "english",
min_num_char = 3, max_num_char = 100,
stemmer = "porter2_stemmer",
path_2folder = "./",
threads = 1,                     # whenever I save data to file set the number threads to 1
verbose = T)
save_dat
save_dat$token
init = textTinyR::Doc2Vec$new(token_list = clust_vec$token,
word_vector_FILE = "./rt_fst_model.vec",
print_every_rows = 5000,
verbose = TRUE,
copy_data = FALSE)
init = textTinyR::Doc2Vec$new(token_list = clust_vec$token,
word_vector_FILE = "rt_fst_model.vec",
print_every_rows = 5000,
verbose = TRUE,
copy_data = FALSE)
init = textTinyR::Doc2Vec$new(token_list = clust_vec$token,
word_vector_FILE = "rt_fst_model.vec",
print_every_rows = 5000,
verbose = TRUE,
copy_data = FALSE)
clust_vec$token
init = textTinyR::Doc2Vec$new(token_list = clust_vec$token,
word_vector_FILE = "./rt_fst_model.vec",
print_every_rows = 5000,
verbose = TRUE,
copy_data = FALSE)
clust_vec$token
init = textTinyR::Doc2Vec$new(token_list = clust_vec$token,
word_vector_FILE = "./rt_fst_model.vec",
print_every_rows = 5000,
verbose = TRUE,
copy_data = FALSE)
df$text[1000]
init = textTinyR::Doc2Vec$new(token_list = clust_vec$token,
word_vector_FILE = "./rt_fst_model.vec",
print_every_rows = 5000,
verbose = TRUE,
copy_data = FALSE)
install.packages("fastTextR")
PATH_INPUT = "./output_token_single_file.txt"
PATH_OUT = "./rt_fst_model"
vecs = fastTextR::skipgram_cbow(input_path = PATH_INPUT, output_path = PATH_OUT,
method = "skipgram", lr = 0.075, lrUpdateRate = 100,
dim = 300, ws = 5, epoch = 5, minCount = 1, neg = 5,
wordNgrams = 2, loss = "ns", bucket = 2e+06,
minn = 0, maxn = 0, thread = 6, t = 1e-04, verbose = 2)
vecs = fastTextR::skipgram_cbow(input_path = PATH_INPUT, output_path = PATH_OUT,
method = "skipgram", lr = 0.075, lrUpdateRate = 100,
dim = 300, ws = 5, epoch = 5, minCount = 1, neg = 5,
wordNgrams = 2, loss = "ns", bucket = 2e+06,
minn = 0, maxn = 0, thread = 6, t = 1e-04, verbose = 2)
library(fastTextR)
vecs = fastTextR::skipgram_cbow(input_path = PATH_INPUT, output_path = PATH_OUT,
method = "skipgram", lr = 0.075, lrUpdateRate = 100,
dim = 300, ws = 5, epoch = 5, minCount = 1, neg = 5,
wordNgrams = 2, loss = "ns", bucket = 2e+06,
minn = 0, maxn = 0, thread = 6, t = 1e-04, verbose = 2)
devtools::install_github('mlampros/fastTextR')
install.packages("devtools")
devtools::install_github('mlampros/fastTextR')
library(devtools)
devtools::install_github('mlampros/fastTextR')
library(devtools)
install.packages("devtools")
library(devtools)
devtools::install_github('mlampros/fastTextR')
vecs = fastTextR::skipgram_cbow(input_path = PATH_INPUT, output_path = PATH_OUT,
method = "skipgram", lr = 0.075, lrUpdateRate = 100,
dim = 300, ws = 5, epoch = 5, minCount = 1, neg = 5,
wordNgrams = 2, loss = "ns", bucket = 2e+06,
minn = 0, maxn = 0, thread = 6, t = 1e-04, verbose = 2)
vecs = fastTextR::skipgram_cbow(input_path = PATH_INPUT, output_path = PATH_OUT,
method = "skipgram", lr = 0.075, lrUpdateRate = 100,
dim = 300, ws = 5, epoch = 5, minCount = 1, neg = 5,
wordNgrams = 2, loss = "ns", bucket = 2e+06,
minn = 0, maxn = 0, thread = 6, t = 1e-04, verbose = 2)
devtools::install_github('mlampros/fastTextR')
devtools::install_github('mlampros/fastTextR')
vecs = fastTextR::skipgram_cbow(input_path = PATH_INPUT, output_path = PATH_OUT,
method = "skipgram", lr = 0.075, lrUpdateRate = 100,
dim = 300, ws = 5, epoch = 5, minCount = 1, neg = 5,
wordNgrams = 2, loss = "ns", bucket = 2e+06,
minn = 0, maxn = 0, thread = 6, t = 1e-04, verbose = 2)
setwd('./fastTextR/')
setwd('fastTextR/')
setwd('fastTextR/')
Rcpp::compileAttributes(verbose = TRUE)
Rcpp::compileAttributes(verbose = TRUE)
Rcpp::compileAttributes(verbose = TRUE)
Rcpp::compileAttributes(verbose = TRUE)
setwd('..')
system("R CMD build fastTextR")
system("R CMD INSTALL fastTextR_1.0.2.tar.gz")
library(fastTextR)
library(fastTextR)
library(fastTextR)
library(fastTextR)
system("R CMD build fastTextR")
system("R CMD INSTALL fastTextR_1.0.2.tar.gz")
clusplot(dc,class,diss=T,shade=T,color=T,labels=11,main="")
abline(v=0,h=0)
# Visualiser les classes sur le premier plan factoriel
library(cluster)
clusplot(dc,class,diss=T,shade=T,color=T,labels=11,main="")
#KMeans
km=kmeans(textes.actifs,11)
print(km$cluster)
clus_sent = data.frame(cbind(km$cluster,textes.illus$sentimentDominant))
colnames(clus_sent) = c('cluster','sentiment')
clus_sent
data=textes.actifs
wss <- (nrow(data)-1)*sum(apply(data,2,var))
for (i in 2:15) wss[i] <- sum(kmeans(data, centers=i)$withinss)
plot(1:15, wss, type="b", xlab="Nombre de classes",ylab="Somme des carrés intra classe")
# Evolution de linertie interclasse
bss=0
for (i in 2:15) bss[i] <- sum(kmeans(data, centers=i)$betweenss)
plot(1:15, bss, type="b", xlab="Nombre de classes",ylab="Somme des carrés inter classe")
# Evolution de linertie interclasse
bss=0
for (i in 2:15) bss[i] <- sum(kmeans(data, centers=i)$betweenss)
plot(1:15, bss, type="b", xlab="Nombre de classes",ylab="Somme des carrés inter classe")
layout(matrix(c(1:2),1,2))
plot(1:15, wss, type="b", xlab="Nombre de classes",ylab="Somme des carr?s intra classe")
plot(1:15, bss, type="b", xlab="Nombre de classes",ylab="Somme des carr?s inter classe")
layout(1)
layout(1)
#Projection des classes sur les premières composantes principales
plot(textes.acp$ind$coord,col=km$cluster, pch=16, cex=1,xlim=c(-0.5,0.5),ylim=c(-0.5,0.5))
text(textes.acp$ind$coord[,1],textes.acp$ind$coord[,2],row.names(textes.acp$ind$coord),cex=0.3)
text(m1,m2,rownames(cond.moyenne),cex=0.95,col="red")
abline(v = 0, h = 0)
#Projection des classes sur les premières composantes principales (AFC)
plot(textes.afc$row$coord,col=km$cluster, pch=16, cex=2,xlim=c(-1,1),ylim=c(-1,1))
text(textes.afc$row$coord[,1],textes.afc$row$coord[,2],row.names(textes.afc$row$coord))
abline(v = 0, h = 0)
